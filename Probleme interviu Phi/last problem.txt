#include <iostream>
#include <unordered_map>
#include <string>

class DocumentStorage
{
    class Document
    {
    public:
        Document(std::string title, std::string content)
        {
            this->title = title;
            this->content = content;
        }

        std::string title;
        std::string content;
    };

public:
    void add(int id, std::string title, std::string content)
    {
        storage[id] = new Document(title, content);
    }

    void remove(int id, std::string& title, std::string& content)
    {
        std::unordered_map<int, Document*>::iterator it = storage.find(id);

        Document* doc = it->second;
        title = doc->title;
        content = doc->content;

        storage.erase(it);
    }

    void clear()
    {
        storage.clear();
    }

private:
    std::unordered_map<int, Document*> storage;
};

#ifndef RunTests
int main()
{
    DocumentStorage storage;
    storage.add(123456, "Hamlet", "Hamlet, Prince of Denmark.");
    storage.add(123457, "Othello", "Othello, the Moore of Venice.");

    std::string title, content;
    storage.remove(123456, title, content);

    std::cout << title << '\n';
    std::cout << content;

    storage.clear();
}
#endif